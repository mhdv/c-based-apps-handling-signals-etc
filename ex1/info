>Zad 1. Program do przechwytywania sygnałów

#!/bin/bash
int i=0;
while : ; do
  let "i=i+1"
  echo "${i}"
  sleep 0.0001;
done
Bez linii sleep, proces w programie top pokazywał zużycie CPU na poziomie 97-99%, po dodaniu linii uśpienia, zużycie procesora zmalało do 30% (usunięcie jednego zera prawdopodobnie zniweluje zużycie procesora do praktycznie żadnego).

Program w C:

#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
// The function used as a handler.
void message(int sig)
{
   printf("\nReceived signal nr=%d", sig);
}
int main()
{
   struct sigaction act;
   act.sa_handler = message;  // Pointer to handler
   sigemptyset(&act.sa_mask); // Clears the mask of signals
   sigaction(SIGQUIT, &act, NULL); // Sets the signal bit in signals mask
   sigaction(SIGINT, &act, NULL); // Sets the signal bit in signals mask
   while (1)
   {
      sleep(2);
   }
}

Program reaguje i wysyła informacje przy odebraniu sygnału SIGINT (ctrl+C) oraz SIGQUIT.

>Zad 2. /proc/PID/

Uruchamiając własny proces/potok, automatycznie tworzy się jego folder w /proc/PIDTEGOPROCESU. Zawarte tam są wszelkie przydatne informacje na temat aktualnie wykonywanego procesu. I tak, dzięki temu, możemy na przykład odczytać z pliku status danego procesu jakie sygnały są przez niego przechwytywane, jakie blokowane itd.

>Zad 3. truss

Dzięki programowi truss możemy śledzić działanie poszczególnych programów (wykonywać je bezpośrednio przy użyciu truss'a, lub sprawdzać już działające procesy). Najprzydatniejszym wywołaniem okazało się (truss -c 'nazwapliku') dzięki któremu wyraźnie widać ile razy dany program dokonuje zapisu, odczytu itd.
Przykładowy output truss'a dla polecenia ls:

syscall               seconds   calls  errors
_exit                    .000       1
write                    .000      21
open                     .000       7
close                    .000       8
time                     .000       1
brk                      .000       4
getpid                   .000       1
ioctl                    .000       3
execve                   .000       1
fcntl                    .000       1
openat                   .000       1
getcontext               .000       1
setustack                .000       1
mmap                     .000      30
munmap                   .000      10       1
getrlimit                .000       1
memcntl                  .000       7
sysinfo                  .000       1
resolvepath              .000       9
getdents64               .000       2
stat64                   .000      10       2
lstat64                  .000       1
fstat64                  .000       3
                     --------  ------   ----
sys totals:              .004     125      3
usr time:                .002
elapsed:                 .040

W powyższym można zauważyć 21 wywołań zapisu, co pozwoliło określić działanie programu ls. Jako iż folder w którym komenda została wykonana zawierał 63 pliki (3 kolumny po 21 plików) łatwo można stwierdzić, że ls używa strumienia wyjścia do konsoli za każdym wydrukowanym wierszem (tj. każdy nowy wiersz jest osobnym printf).

Truss można również używać do odczytania przechwytywanych przez dany program sygnałów.

>Zad 4. strace

Z zaobserwowanych doświadczeń program strace jest praktycznie analogią truss'a, tylko w systemach linux. Flagi wywoływane są praktycznie identyczne, a śledzenie procesów itp. działa na takiej samej zasadzie jak w przypadku truss.